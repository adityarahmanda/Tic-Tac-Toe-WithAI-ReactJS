{"version":3,"sources":["helper.js","components/game/Square.js","components/game/Board.js","components/game/Notification.js","components/Game.js","components/MainMenu.js","components/NavMenu.js","components/Settings.js","index.js"],"names":["isBoardFilled","squares","i","length","calculateWinner","lines","a","b","c","minimax","player","isMax","opponent","winner","square","score","best","random","min","max","Math","floor","findRandomSquare","randomSquare","Square","value","active","onClick","style","className","Board","activeSquare","number","map","Notification","Game","isRestart","playmode","difficulty","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","swapTurn","setSwapTurn","AIDoMove","setAIDoMove","AITurnFirst","setAITurnFirst","AIMove","setAIMove","roundEnded","setRoundEnded","scores","setScore","winLines","setWinLines","showNotification","setShowNotification","notificationText","setNotificationText","historyPoint","slice","current","useMemo","xo","setNotification","text","time","setTimeout","startNewRound","useCallback","playmodes","WITH_AI","checkWinner","Helper","tie","console","log","newScores","makeMove","restart","useEffect","bestSquare","difficulties","EASY","MEDIUM","squareLeft","HARD","class","handleClick","MainMenu","WITH_FRIEND","NavMenu","gameStatus","Settings","App","setPlaymode","setDifficulty","gameStarted","setGameStarted","isMenuOpen","setIsMenuOpen","setIsRestart","id","changePlaymode","changeDifficulty","startGame","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.297b8fcf.chunk.js","sourcesContent":["import {difficulties} from \"./index\";\r\n\r\nexport function isBoardFilled(squares) {\r\n  for(let i = 0; i < squares.length; i++) {\r\n    if(squares[i] === null) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n\r\n  for(let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function getWinnerLine(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n\r\n  for(let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return lines[i];\r\n    }\r\n  }\r\n  return Array(3).fill(null);\r\n}\r\n\r\nfunction minimax(player, squares, isMax) {\r\n  const opponent = (player === 'x') ? 'o' : 'x';\r\n  const winner = calculateWinner(squares);\r\n\r\n  // console.log(\"player : \" + player + \", opponent : \" + opponent);\r\n  // console.log(\"square : \" + squares + \", depth : \" + depth + \", isMax : \" + isMax);\r\n  \r\n  // If player wins, score is +1\r\n  if (winner === player) return { square: -1, score: 1 };\r\n  \r\n  // If opponent wins, score is -1\r\n  if (winner === opponent) return { square: -1, score: -1 };\r\n  \r\n  // If Tie, score is 0\r\n  if (isBoardFilled(squares)) return { square: -1, score: 0 };\r\n  \r\n  // Initialize 'best'. If isMax, we want to maximize score, and minimize otherwise.\r\n  const best = { square: -1, score: isMax ? -1000 : 1000 };\r\n  \r\n  // Loop through every square on the board\r\n  for (let i = 0; i < squares.length; i++) {\r\n    // If square is already filled, it's not a valid move so skip it\r\n    if (squares[i]) {\r\n      continue;\r\n    }\r\n    \r\n    // If square is unfilled, then it's a valid move. Play the square.\r\n    squares[i] = isMax ? player : opponent;\r\n    // Simulate the game until the end game and get the score,\r\n    // by recursively calling minimax.\r\n    const score = minimax(player, squares, !isMax).score;\r\n    // Undo the move\r\n    squares[i] = null;\r\n\r\n    if (isMax) {\r\n      // Maximizing player; track the largest score and move.\r\n      if (score > best.score) {\r\n        best.score = score;\r\n        best.square = i;\r\n      }\r\n    } else {\r\n      // Minimizing opponent; track the smallest score and move.\r\n      if (score < best.score) {\r\n        best.score = score;\r\n        best.square = i;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // The move that leads to the best score at end game.\r\n  return best;\r\n};\r\n\r\nexport function random(min, max) {\r\n  return Math.floor((min + (Math.random() * max - min)));\r\n}\r\n\r\nexport function findRandomSquare(squares) {\r\n  let randomSquare = 0;\r\n  \r\n  do {\r\n    randomSquare = random(0, 9);\r\n  } while(squares[randomSquare] != null);\r\n  \r\n  return randomSquare;\r\n}\r\n\r\nexport function findSquare(difficulty, squares, player) {\r\n  let square;\r\n  \r\n  if(difficulty === difficulties.EASY) {\r\n    square = findRandomSquare(squares);\r\n  } else if(difficulty === difficulties.MEDIUM) { \r\n    let isUseMinimax;\r\n\r\n    let squareLeft = 0;\r\n    for(let i = 0; i < squares.length; i++) {\r\n      if(squares[i] != null) {\r\n        squareLeft++;\r\n      }\r\n    }\r\n\r\n    isUseMinimax = squareLeft < 6 ? true : (random(0, 2) === 0);\r\n    \r\n    square = isUseMinimax ? minimax(player, squares, true).square : findRandomSquare(squares);\r\n  } else if(difficulty === difficulties.HARD) {\r\n    square =  minimax(player, squares, true).square;\r\n  }\r\n\r\n  return square;\r\n}\r\n","import React from \"react\";\r\n\r\nconst Square = ({value, active, onClick}) => {\r\n  const style = `squares btn ${value && value} ${active && \"active\"}`;\r\n\r\n  return(\r\n    <button className={style} onClick={onClick}>\r\n      <div className=\"content\">{ value }</div>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = ({squares, lines, onClick}) => {\r\n  function activeSquare(number) {\r\n    if(lines == null) return false;\r\n    for(let i = 0; i < lines.length; i++) {\r\n      if(lines[i] === number) return true;\r\n    }\r\n    return false;\r\n  }\r\n    ;\r\n  return(\r\n    <div className=\"board\">\r\n      {squares.map((square, i) => (\r\n        <Square key={i} value={square} active={activeSquare(i)} onClick={() => onClick(i)} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\n\r\nconst Notification = ({active, value}) => {\r\n    const style = `notification ${active && \"show\"}`;\r\n\r\n    return(<div className={style}>{value}</div>);\r\n}\r\n\r\nexport default Notification;","import React, {useState, useEffect, useCallback, useMemo} from \"react\";\r\nimport { playmodes } from \"../index\";\r\nimport * as Helper from \"../helper\";\r\nimport Board from \"./game/Board\";\r\nimport Notification from \"./game/Notification\";\r\nimport { RiRestartFill } from \"react-icons/ri\";\r\n\r\nconst Game = ({isRestart, playmode, difficulty}) => {\r\n    const [history, setHistory] = useState([Array(9).fill(null)]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [swapTurn, setSwapTurn] = useState(true);\r\n    \r\n    const [AIDoMove, setAIDoMove] = useState(false);\r\n    const [AITurnFirst, setAITurnFirst] = useState(false);\r\n    const [AIMove, setAIMove] = useState(false);\r\n    \r\n    const [roundEnded, setRoundEnded] = useState(false);\r\n    const [scores, setScore] = useState(Array(2).fill(0));\r\n    const [winLines, setWinLines] = useState(Array(3).fill(null));\r\n\r\n    const [showNotification, setShowNotification] = useState(false);\r\n    const [notificationText, setNotificationText] = useState(\" \");\r\n\r\n    const historyPoint = history.slice(0, stepNumber + 1);\r\n    const current = historyPoint[stepNumber];\r\n    const squares = useMemo(squares => [...current], [current]);\r\n\r\n    const xo = xIsNext ? 'x' : 'o';\r\n\r\n    function setNotification(text, time){\r\n      setNotificationText(text);\r\n      setShowNotification(true);\r\n      \r\n      setTimeout(function() {\r\n        setShowNotification(false);\r\n      }, time);\r\n    }\r\n\r\n    const startNewRound = useCallback(() => {\r\n      setTimeout(function() {\r\n        setXIsNext(!swapTurn);\r\n        setSwapTurn(!swapTurn);\r\n        setStepNumber(0);\r\n        setRoundEnded(false);\r\n        setWinLines(Array(3).fill(null));\r\n\r\n        if(playmode === playmodes.WITH_AI && swapTurn) {\r\n          setAITurnFirst(true);\r\n        }\r\n\r\n        const player = swapTurn ? 'o' : 'x';\r\n        const notification = <><span className={player}>{player}</span> turn first</>;\r\n        setNotification(notification, 1500);\r\n      }, 2000);\r\n    }, [playmode, swapTurn]);\r\n\r\n    const checkWinner = useCallback(() => {\r\n      const winner = Helper.calculateWinner(squares);\r\n      const tie = Helper.isBoardFilled(squares);\r\n\r\n      if(winner || tie) {\r\n        if(winner) {\r\n          setNotification(<><span className={xo}>{xo}</span> Win</>, 1500);\r\n          console.log(xo + \" Win!\");\r\n\r\n          let newScores = scores;\r\n          newScores[xo === 'x' ? 0 : 1]++;\r\n          setScore(newScores);\r\n        } else {\r\n          setNotification(\"Draw\", 1500);\r\n          console.log(\"Draw!\");\r\n        }\r\n\r\n        setRoundEnded(true);\r\n        setWinLines(Helper.getWinnerLine(squares));\r\n        startNewRound();\r\n      } else {\r\n        setXIsNext(!xIsNext);\r\n\r\n        if(playmode === playmodes.WITH_AI && xo === 'x') {\r\n          setAIDoMove(true);\r\n        }\r\n      }\r\n    }, [squares, startNewRound, xo, scores, xIsNext, playmode]);\r\n\r\n    const makeMove = useCallback((i) => {\r\n      if(squares[i]) return;\r\n      \r\n      squares[i] = xo;\r\n      const history = [...historyPoint, squares];\r\n      \r\n      setHistory(history);\r\n      setStepNumber(history.length - 1);\r\n      \r\n      checkWinner();\r\n    }, [historyPoint, squares, xo, checkWinner]);\r\n\r\n    const handleClick = (i) => {\r\n      if(squares[i] || roundEnded || AIMove) return;\r\n\r\n      console.log(\"player select square \" + i);\r\n      makeMove(i);\r\n    }  \r\n    \r\n    function restart() {\r\n      setNotification(\"Restart\", 1500);\r\n      setScore(Array(2).fill(0));\r\n      setHistory([Array(9).fill(null)]);\r\n      setStepNumber(0);\r\n      setXIsNext(true);\r\n    }\r\n\r\n    //Check restart\r\n    useEffect(() => {\r\n      if(isRestart) {\r\n        restart();\r\n      }\r\n    });\r\n\r\n    //Check AI movement\r\n    useEffect(() => {\r\n      if(AIDoMove) {\r\n        setAIMove(true);\r\n        setTimeout(function() {\r\n          const bestSquare = Helper.findSquare(difficulty, squares, xo);\r\n          if (bestSquare !== -1) {\r\n            console.log(\"AI select best square \" + bestSquare);\r\n            makeMove(bestSquare);\r\n            setAIMove(false);\r\n          }\r\n        }, 500);\r\n\r\n        setAIDoMove(false);\r\n      }\r\n    }, [AIDoMove, difficulty, squares, xo, makeMove]);\r\n\r\n    //Check if AI first turn\r\n    useEffect(() => {\r\n      if(AITurnFirst) {\r\n        setAIMove(true);\r\n        setTimeout(function() {\r\n          const randomSquare = Helper.random(0, 8);\r\n          console.log(\"AI turn first and select random square \" + randomSquare);\r\n          makeMove(randomSquare);\r\n          setAIMove(false);\r\n        }, 500);\r\n        \r\n        setAITurnFirst(false);\r\n      }\r\n    }, [AITurnFirst, makeMove]);\r\n\r\n    return(\r\n      <>\r\n        <div class=\"board-wrapper\">\r\n          <div className=\"score-wrapper\">\r\n            <div className={\"player x \" + ((xo === 'x') && \"active\")} >x</div>\r\n            <div className=\"score centered\">\r\n              <Notification active={showNotification} value={notificationText} />\r\n              {scores[0]} - {scores[1]}\r\n            </div>\r\n            <div className={\"player o \" + ((xo === 'o') && \"active\")} >o</div>\r\n          </div>\r\n          <Board squares={current} lines={winLines} onClick={i => handleClick(i)} />\r\n        </div>\r\n        <RiRestartFill className=\"restart\" onClick={() => restart()} />\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport { playmodes } from \"../index.js\";\r\n\r\nconst MainMenu = ({onClick}) => (\r\n    <div className=\"main-menu centered\">\r\n      <h3>Choose your play mode</h3>\r\n      <div className=\"menu\">\r\n        <button className=\"btn with-ai\" onClick={() => onClick(playmodes.WITH_AI)}><span>{playmodes.WITH_AI}</span></button>\r\n      </div>\r\n      <div className=\"menu\">\r\n        <button className=\"btn with-friend\" onClick={() => onClick(playmodes.WITH_FRIEND)}><span>{playmodes.WITH_FRIEND}</span></button>\r\n      </div>\r\n    </div>\r\n);\r\n\r\nexport default MainMenu;","import React from \"react\";\r\nimport { playmodes } from \"../index\";\r\n\r\nconst NavMenu = ({value, gameStatus, onClick}) => {\r\n    return(\r\n        <nav class=\"nav-menu\">\r\n            <ul>\r\n                <li>\r\n                    <span className={((value === playmodes.WITH_AI) && gameStatus) && \"active\"} \r\n                          onClick={() => onClick(playmodes.WITH_AI)}>\r\n                    Play {playmodes.WITH_AI}</span>\r\n                </li>             \r\n                <li>\r\n                    <span className={((value === playmodes.WITH_FRIEND) && gameStatus) && \"active\"} \r\n                          onClick={() => onClick(playmodes.WITH_FRIEND)}>\r\n                    Play {playmodes.WITH_FRIEND}</span>\r\n                </li>           \r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavMenu;","import React from \"react\";\r\nimport { difficulties } from \"../index\";\r\n\r\nconst Settings = ({value, onClick}) => {\r\n    return(\r\n        <div className=\"settings\">\r\n            <h5>Settings</h5>\r\n            <div className=\"left-align\">Difficulty</div>\r\n            <div className=\"dropdown left-align\">{value}<div className=\"down-arrow\" />\r\n                <div className=\"dropdown-contents\">\r\n                    <div onClick={() => onClick(difficulties.EASY)}>{difficulties.EASY}</div>\r\n                    <div onClick={() => onClick(difficulties.MEDIUM)}>{difficulties.MEDIUM}</div>\r\n                    <div onClick={() => onClick(difficulties.HARD)}>{difficulties.HARD}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React, {useState, useEffect} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Game from \"./components/Game\";\r\nimport MainMenu from \"./components/MainMenu\";\r\nimport NavMenu from \"./components/NavMenu\";\r\nimport Settings from \"./components/Settings\";\r\nimport \"./index.css\";\r\n\r\nexport const playmodes = {\r\n    WITH_AI: \"With AI\",\r\n    WITH_FRIEND: \"With Friend\"\r\n}\r\n\r\nexport const difficulties = {\r\n    EASY: \"Stupid\",\r\n    MEDIUM: \"Normal\",\r\n    HARD: \"Unbeatable\"\r\n}\r\n\r\nconst App = () => {\r\n    const [playmode, setPlaymode] = useState(playmodes.WITH_AI);\r\n    const [difficulty, setDifficulty] = useState(difficulties.MEDIUM);\r\n    const [gameStarted, setGameStarted] = useState(false); \r\n\r\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n\r\n    const [isRestart, setIsRestart] = useState(false);\r\n\r\n    function backToMainMenu() {\r\n        if(gameStarted) {\r\n            setGameStarted(false);\r\n            if(isMenuOpen) setIsMenuOpen(false);\r\n        } \r\n    }\r\n\r\n    function startGame(playmode) {\r\n        setPlaymode(playmode);\r\n        setGameStarted(true);\r\n        if(isMenuOpen) setIsMenuOpen(false);\r\n    }\r\n\r\n    function changeDifficulty(difficulty) {\r\n        if(gameStarted && playmode === playmodes.WITH_AI) {\r\n            setIsRestart(true);\r\n        }\r\n        setDifficulty(difficulty);\r\n    }\r\n    \r\n    function changePlaymode(playmode) {\r\n        if(!gameStarted) {\r\n            setPlaymode(playmode);\r\n            setGameStarted(true);\r\n        } else {\r\n            setPlaymode(playmode);\r\n            setIsRestart(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isRestart) {\r\n           setIsRestart(false);\r\n        }\r\n    }, [isRestart]);\r\n\r\n    return (\r\n    <>\r\n        <header id=\"header\">\r\n            <div className=\"hamburger-menu-button\" onClick={() => setIsMenuOpen(!isMenuOpen)} >\r\n                <div className={isMenuOpen ? \"hamburger-menu open\" : \"hamburger-menu\"} /> \r\n            </div>\r\n            <div id=\"navbar\" className={!isMenuOpen && \"close\"}>\r\n                <NavMenu value={playmode} gameStatus={gameStarted} onClick={playmode => changePlaymode(playmode)} />\r\n                <Settings value={difficulty} onClick={difficulty => changeDifficulty(difficulty)} />\r\n            </div>\r\n            <h1 className=\"title centered\" onClick={() => backToMainMenu()}>tictactoe</h1>\r\n        </header>\r\n        <main id=\"main-wrapper\">\r\n            <div className=\"game-wrapper\">\r\n            { gameStarted ? <Game playmode={playmode} difficulty={difficulty} isRestart={isRestart}/> : <MainMenu onClick={playmode => startGame(playmode)} /> } \r\n            </div>\r\n        </main>\r\n        { !gameStarted && <footer id=\"footer\" className=\"centered\">@2020 - <a href=\"https://adityarahmanda.com\">Aditya Rahmanda</a></footer> }\r\n    </>\r\n    );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"outer-wrapper\"));\r\n"],"sourceRoot":""}